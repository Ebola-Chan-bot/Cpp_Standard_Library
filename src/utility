#pragma once
#ifdef ARDUINO_ARCH_AVR
/*	Copyright (C) 2004 Garrett A. Kajmowicz
	This file is part of the uClibc++ Library.

	This library is free software; you can redistribute it and/or
	modify it under the terms of the GNU Lesser General Public
	License as published by the Free Software Foundation; either
	version 2.1 of the License, or (at your option) any later version.

	This library is distributed in the hope that it will be useful,
	but WITHOUT ANY WARRANTY; without even the implied warranty of
	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
	Lesser General Public License for more details.

	You should have received a copy of the GNU Lesser General Public
	License along with this library; if not, write to the Free Software
	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

*/
#define __glibcxx_want_unreachable
#include <initializer_list>
#include <type_traits>
#include <bits/utility.h>

#pragma GCC visibility push(default)

namespace std
{
#ifdef ARDUINO_ARCH_AVR
	namespace rel_ops
	{
		template <class T>
		inline bool operator!=(const T &x, const T &y)
		{
			return !(x == y);
		}

		template <class T>
		inline bool operator>(const T &x, const T &y)
		{
			return (y < x);
		}

		template <class T>
		inline bool operator<=(const T &x, const T &y)
		{
			return !(y < x);
		}

		template <class T>
		inline bool operator>=(const T &x, const T &y)
		{
			return !(x < y);
		}
	}
// 203
#ifdef __cpp_lib_unreachable // C++ >= 23
	/// Informs the compiler that program control flow never reaches this point.
	/**
	 * Evaluating a call to this function results in undefined behaviour.
	 * This can be used as an assertion informing the compiler that certain
	 * conditions are impossible, for when the compiler is unable to determine
	 * that by itself.
	 *
	 * For example, it can be used to prevent warnings about reaching the
	 * end of a non-void function without returning.
	 *
	 * @since C++23
	 */
	[[noreturn, __gnu__::__always_inline__]]
	inline void
	unreachable()
	{
#ifdef _GLIBCXX_DEBUG
		std::__glibcxx_assert_fail(nullptr, 0, "std::unreachable()", nullptr);
#elif defined _GLIBCXX_ASSERTIONS
		__builtin_trap();
#else
		__builtin_unreachable();
#endif
	}
#endif
	// 230
	_EXPORT_STD template <class _Ty, class _Pr>
	_NODISCARD constexpr _Ty(max)(initializer_list<_Ty>, _Pr); // implemented in <algorithm>

	_EXPORT_STD template <class _Ty>
	_NODISCARD constexpr _Ty(max)(initializer_list<_Ty>); // implemented in <algorithm>
														  // 86
	//   757
	template <class _Ty, class _Other = _Ty>
	_CONSTEXPR20 _Ty exchange(_Ty &_Val, _Other &&_New_val) noexcept(
		conjunction<is_nothrow_move_constructible<_Ty>, is_nothrow_assignable<_Ty &, _Other>>::value)
	{
		// assign _New_val to _Val, return previous _Val
		_Ty _Old_val = static_cast<_Ty &&>(_Val);
		_Val = static_cast<_Other &&>(_New_val);
		return _Old_val;
	}
	// 766
#endif
}
#pragma GCC visibility pop
#else
#include_next <utility>
#endif
#ifdef ARDUINO_ARCH_SAM
#include <bits/utility.h>
#endif